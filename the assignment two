# Functions for running an encryption or decryption.

# The values of the two jokers.
JOKER1 = 27
JOKER2 = 28

# Write your functions here:


def clean_message(message):
    '''
    (str) -> str
    Given the message(a string), this function will
    return a copy of the message that includes only its
    alphabetical characters, where each of those characters
    has been converted to uppercase
    >>> clean_message("")
    ''
    >>> clean_message("ABCDEFG")
    'ABCDEFG'
    >>> clean_message("leo lin")
    'LEOLIN'
    >>> clean_message("Helloworld")
    'HELLOWORLD'
    >>> clean_message("a   b   c")
    'ABC'
    >>> clean_message('i need more example')
    'INEEDMOREEXAMPLE'
    >>> clean_message("HOW ARE YOU")
    'HOWAREYOU'
    '''
    # Create and empty str
    copy_of_message = str()
    # Use the for loop to examine each letter
    # Use the if statement to find out that whether character is English letter
    # If so, then let it to be upper case
    for position_number in range(len(message)):
        if message[position_number].isalpha():
            copy_of_message += message[position_number].upper()
    return copy_of_message


def encrypt_letter(letter, keystream):
    '''
    (str,int)-> str
    REQ: 0 <= keystream and keystream <=26
    REQ: the English letter in this case must be an English letter
    Given the letter and the keystream value, this function will return
    an encrypted letter created with the help of the value of keystream
    >>> encrypt_letter("A",2)
    'C'
    >>> encrypt_letter("z",1)
    'A'
    >>> encrypt_letter("C",3)
    'F'
    >>> encrypt_letter("k",3)
    'N'
    >>> encrypt_letter('D',26)
    'D'
    '''
    # Initially, we need to create an alphabet string named alpha_dictionary
    # which contains all the letter in their upper case(in order)
    alpha_dictionary = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    # If the character is in its lower case, then convert it into upper case
    letter = letter.upper()
    # Find the position of the letter in the alpha list
    index_of_letter = alpha_dictionary.find(letter)
    # Add the value of the keystream to find the position value of code
    # If the value is over 26, then we can use the mod method to
    # let it to be within the range of [0,26]
    encrypted_word = alpha_dictionary[(index_of_letter + keystream) % 26]
    return encrypted_word


def decrypt_letter(encrypted_letter, key):
    '''
    (str,int)-> str
     REQ: the encrypted letter should be an upper-case English letter
     REQ: the value of the keystream (Vk) must be 0<=Vk<=26
     Given the letter and the keystream value, this function will
    return a decrypted word with the help of the key value
    >>> decrypt_letter("C",2)
    'A'
    >>> decrypt_letter("A",1)
    'Z'
    >>> decrypt_letter("F",3)
    'C'
    >>> decrypt_letter("N",3)
    'K'
    >>> decrypt_letter("D",26)
    'D'
    '''
    # Initially, we need to create an alphabet string named alpha_dictionary
    # which contains all the letter in their upper case(in order)
    alpha_dictionary = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    # Find the position of the letter in the alpha list
    index_of_encrypt_letter = alpha_dictionary.find(encrypted_letter)
    # Delete the value of the keystream to find the original position
    # value of the letter
    # Since we can use the negative number to express the position of
    # the letter
    # we can just put the result (index_of_encrypt_letter - key) to stand
    # for the position of the word
    decrypt_word = alpha_dictionary[(index_of_encrypt_letter - key)]
    return decrypt_word


def swap_cards(deck, index):
    '''
    (list of int, int) -> NoneType
    REQ: len(deck) > 0
    REQ: index is an integer
    REQ: 0 <= index <= len (deck) - 1
    Given the deck (a list of integer) and the index, this function will
    mutate the list by swapping the the card at the position of index with
    the card that follows it (treat the deck as a circular: if the card at
    the index is on the bottom of the deck, swap that card with the top card.)
    >>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    >>> swap_cards(a, 4)
    >>> a == [1, 2, 3, 4, 6, 5, 7, 8, 9, 0]
    True
    >>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    >>> swap_cards(a, 9)
    >>> a == [0, 2, 3, 4, 5, 6, 7, 8, 9, 1]
    True
    >>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
    >>> swap_cards(a, 0)
    >>> a == [2, 1, 3, 4, 5, 6, 7, 8, 9, 0]
    True
    >>> a = [4, 2, 1, 2, 4]
    >>> swap_cards(a,0)
    >>> a == [2, 4, 1, 2, 4]
    True
    >>> a = [2, 5, 6, 7, 2, 5]
    >>> swap_cards(a,3)
    >>> a == [2, 5, 6, 2, 7, 5]
    True
    '''
    # Find out the position of the next letter.
    # If the original letter is at the end of
    # the list, then the next letter should be at the
    # beginning of the list (use the mod method to
    # get the position of the following card)
    the_following_card = (index + 1) % len(deck)
    # swap the order of the two cards
    (deck[the_following_card], deck[index]) =\
        (deck[index], deck[the_following_card])


def move_joker_1(deck):
    '''
    (list of int) -> NoneType
    REQ: len(deck) >= 2
    REQ: deck.count(27) = 1
    Given a list of integer, this function will find the position of
    integer 27 and swap it with the the following letter
    ( treat the card as a circular)
    >>> my_list = [1, 2, 3, 4, 5, 6, 7, 27, 1, 2, 3]
    >>> move_joker_1(my_list)
    >>> my_list == [1, 2, 3, 4, 5, 6, 7, 1, 27, 2, 3]
    True
    >>> my_list = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 27]
    >>> move_joker_1(my_list)
    >>> my_list == [27, 2, 3, 4, 5, 6, 7, 8, 1, 2, 1]
    True
    >>> my_list = [27, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3]
    >>> move_joker_1(my_list)
    >>> my_list == [2, 27, 3, 4, 5, 6, 7, 8, 1, 2, 3]
    True
    >>> my_list = [2, 27, 3]
    >>> move_joker_1(my_list)
    >>> my_list == [2, 3, 27]
    True
    >>> my_list = [2, 1, 27]
    >>> move_joker_1(my_list)
    >>> my_list == [27, 1 ,2]
    True
    '''
    # Use the function swap_cards function above to
    # swap the JOKER1 with its following card
    swap_cards(deck, deck.index(JOKER1))


def move_joker_2(deck):
    '''
    (list of int) -> NoneType
    REQ: len(deck) >= 2
    REQ: deck.count(28) = 1
    Given a list of integer, this function will find the position of
    integer 28 and swap it with the the following letter twice to move
    it two cards down( treat the deck as a circular)
    >>> my_list = [28, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3]
    >>> move_joker_2(my_list)
    >>> my_list == [2, 3, 28, 4, 5, 6, 7, 8, 1, 2, 3]
    True
    >>> my_list = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 28]
    >>> move_joker_2(my_list)
    >>> my_list ==[2, 28, 3, 4, 5, 6, 7, 8, 1, 2, 1]
    True
    >>> my_list = [2, 3, 4, 5, 6, 7, 28, 1, 2, 3]
    >>> move_joker_2(my_list)
    >>> my_list == [2, 3, 4, 5, 6, 7, 1, 2, 28, 3]
    True
    >>> list_one = [1, 2, 3, 4, 28, 6, 7, 8, 1, 2, 3]
    >>> move_joker_2(list_one)
    >>> list_one == [1, 2, 3, 4, 6, 7, 28, 8, 1, 2, 3]
    True
    >>> my_list = [1, 28]
    >>> move_joker_2(my_list)
    >>> my_list == [1, 28]
    True
    >>> my_list = [1, 28, 23]
    >>> move_joker_2(my_list)
    >>> my_list == [28, 23, 1]
    True
    '''
    # Use the function swap_cards twice above to
    # swap the JOKER2 with its following cards twice
    swap_cards(deck, deck.index(JOKER2))
    swap_cards(deck, deck.index(JOKER2))


def triple_cut(deck):
    '''
    (list of integer) -> NoneType
    REQ: len(deck) >= 2
    REQ: deck.count(27) = 1
    REQ: deck.count(28) = 1
    Given the list of integers, this function will mutate the list by
    swapping the cards above the first joker (the joker closest to the
    top of the deck) with the cards below the second joker
    >>> list_two = [1,2,3,4,28,6,7,8,27,2,3]
    >>> triple_cut(list_two)
    >>> list_two == [2, 3, 28, 6, 7, 8, 27, 1, 2, 3, 4]
    True
    >>> list_two = [1,2,3,4,28,6,7,8,2,3,27]
    >>> triple_cut(list_two)
    >>> list_two == [28, 6, 7, 8, 2, 3, 27, 1, 2, 3, 4]
    True
    >>> list_two = [28,1,2,3,4,6,7,8,2,3,27]
    >>> triple_cut(list_two)
    >>> list_two == [28, 1, 2, 3, 4, 6, 7, 8, 2, 3, 27]
    True
    >>> list_two = [1,2,3,4,28,27,6,7,8,2,3]
    >>> triple_cut(list_two)
    >>> list_two == [6, 7, 8, 2, 3, 28, 27, 1, 2, 3, 4]
    True
    >>> list_two = [1,2,3,4,27,28,6,7,8,2,3]
    >>> triple_cut(list_two)
    >>> list_two == [6, 7, 8, 2, 3, 27, 28, 1, 2, 3, 4]
    True
    >>> list_two = [27,1,2,3,4,6,7,8,2,3,28]
    >>> triple_cut(list_two)
    >>> list_two == [27, 1, 2, 3, 4, 6, 7, 8, 2, 3, 28]
    True
    >>> list_two = [1,2,3,4,27,6,7,8,28,2,3]
    >>> triple_cut(list_two)
    >>> list_two == [2, 3, 27, 6, 7, 8, 28, 1, 2, 3, 4]
    True
    >>> my_list = [27,28,1,2,3,4]
    >>> triple_cut(my_list)
    >>> my_list == [1, 2, 3, 4, 27, 28]
    True
    '''
    # Find the position of the integer 27 and 28
    index_of_joker_1 = deck.index(JOKER1)
    index_of_joker_2 = deck.index(JOKER2)
    # Create a copy of the original list(Because I will
    # delete all the element in the original list, I need a
    # record of the original list)
    copy_of_deck = deck[:]
    # Use the if loop to find whether index of the which joker
    # occur initially to find out how to divide the list into three parts
    # Delete all the items in the original list and use the item
    # in the copy of the original list to continue the function
    # Divide the list into three parts
    # Add the three parts together in required order
    if index_of_joker_1 < index_of_joker_2:
        del deck[:]
        copy_one = copy_of_deck[:index_of_joker_1]
        copy_two = copy_of_deck[index_of_joker_2 + 1:]
        copy_three = copy_of_deck[index_of_joker_1: index_of_joker_2 + 1]
        deck.extend(copy_two)
        deck.extend(copy_three)
        deck.extend(copy_one)
    elif index_of_joker_1 > index_of_joker_2:
        del deck[:]
        copy_one = copy_of_deck[:index_of_joker_2]
        copy_two = copy_of_deck[index_of_joker_1 + 1:]
        copy_three = copy_of_deck[index_of_joker_2: index_of_joker_1 + 1]
        deck.extend(copy_two)
        deck.extend(copy_three)
        deck.extend(copy_one)


def insert_top_to_bottom(deck):
    '''
    (list of int) -> NoneType
    REQ: len(deck) > 0
    REQ: deck[-1] < len(deck)
    Given a list of integers, this function will mutate
    the list by looking at the number of the bottom card.
    Then move that many cards from the top of the deck to
    the bottom, inserting them just above the bottom card.
    >>> list_four = [1,2,3,4,5,6,4,2,3,4]
    >>> insert_top_to_bottom(list_four)
    >>> list_four == [5, 6, 4, 2, 3, 1, 2, 3, 4, 4]
    True
    >>> list_four = [1,2,3,4,5,6,4,2,3,5]
    >>> insert_top_to_bottom(list_four)
    >>> list_four == [6, 4, 2, 3, 1, 2, 3, 4, 5, 5]
    True
    >>> list_four = [1,2,3,4,5,6,7,8,3,2,4]
    >>> insert_top_to_bottom(list_four)
    >>> list_four == [5, 6, 7, 8, 3, 2, 1, 2, 3, 4, 4]
    True
    >>> list_four = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,\
    18,19,20,21,22,23,24,25,26,27,28]
    >>> insert_top_to_bottom(list_four)
    >>> list_four == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
     14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]
    True
    >>> list_four = [1,1,1,1,1,1,1,1,1,1,11,12,13,14,15,16,17,18,\
    19,20,21,22,23,24,25,26,27,28,23,28]
    >>> insert_top_to_bottom(list_four)
    >>> list_four == [28, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 12,\
     13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]
    True
    '''
    # Initially, we can delete the last letter and make a copy of it
    the_bottom = deck[-1]
    del deck[-1]
    # Then check whether the bottom card contains the joker_2
    # If so, then the value will be replaced by joker1
    # If not, then the value will stay the same
    if the_bottom == JOKER2:
        value = JOKER1
    else:
        value = the_bottom
    # make a copy of the cards (the number of them is value)
    # from the beginning,
    copy = deck[:value]
    # delete cards (the number of them is value) from the beginning,
    del deck[:value]
    # Since we have some content located in the beginning of the list,
    # then add the content back to the end of the list
    deck.extend(copy)
    # Since we have deleted the last character at the end of list,
    # we need to add the bottom card back to the deck
    deck.append(the_bottom)


def get_card_at_top_index(deck):
    '''
    (list of int) -> NoneType
    REQ: deck[0] <= len(deck)
    Given a list of integers, this function will find the card that
    is at position of v(the number of the first card.If v is JOKER1,
    use a value of JOKER1 in this step) in the deck (the topmost card
    is at position 0)
    >>> get_card_at_top_index([1,2,3,4,1,4,5])
    2
    >>> get_card_at_top_index([3,2,3,4,5,2,3,4])
    4
    >>> get_card_at_top_index([9,1,1,3,2,1,3,1,2,32,1])
    32
    >>> get_card_at_top_index([7,2,3,4,5,6,7,8,9,10,11,12])
    8
    >>> get_card_at_top_index([11,2,3,4,5,6,7,8,9,10,11,12])
    12
    >>> my_deck = [28, 20, 1, 22, 19, 24, 25, 6, 9, 1, 22, 3, 24, 5, 6,\
    7, 18, 9, 17, 11, 2, 13, 14, 15, 16, 17, 18, 27]
    >>> get_card_at_top_index(my_deck)
    27
    '''
    value_of_top_card = deck[0]
    # If the value of the card is JOKER2 then use the JOKER2 to replace it
    if value_of_top_card == JOKER2:
        value = JOKER1
    else:
        value = value_of_top_card
    # return the number of the card in the position value
    result = deck[value]
    return result


def get_next_value(deck):
    '''
    (list of int) -> int
    REQ: len(deck) >= 28
    Given the a deck of cards, this function will return a number
    that can be regard as the potential keystream value
    >>> list_five = [1,2,3,4,27,28,2]
    >>> get_next_value(list_five)
    27
    >>> list_five = [1,1,1,1,1,1,1,1,1,1,11,12,13,14,15,\
    16,17,18,19,20,21,22,23,24,25,26,27,28]
    >>> get_next_value(list_five)
    28
    >>> list_five = [13,14,15,16,27,18,19,20,1,1,1,1,1,1,1,\
    1,1,1,11,12,21,22,23,24,25,26,27,28]
    >>> get_next_value(list_five)
    1
    '''
    # just call the five functions above
    # Step one
    move_joker_1(deck)
    # Step two
    move_joker_2(deck)
    # Step three
    triple_cut(deck)
    # Step four
    insert_top_to_bottom(deck)
    # Step five
    next_value = get_card_at_top_index(deck)
    return next_value


def get_next_keystream_value(deck):
    '''
    (list of int) -> int
    REQ: len(deck) >= 28
    Given the a deck of cards, this function will return a number
    that can be regard as the keystream value in the range [1,26]
    >>> list_five = [1,1,1,1,1,1,1,1,1,1,11,12,13,14,15,16,17,\
    18,19,20,21,22,23,24,25,26,27,28,23]
    >>> get_next_keystream_value(list_five) == 20
    True
    >>> list_five = [13,14,15,16,27,18,19,20,1,1,1,1,1,1,1,1,1,\
    1,11,12,21,22,23,24,25,26,23,28,23]
    >>> get_next_keystream_value(list_five) == 24
    True
    >>> list_five = [13,22,15,16,12,18,19,20,1,1,1,1,1,1,1,1,1,\
    1,11,12,21,22,23,24,25,26,27,28,23]
    >>> get_next_keystream_value(list_five) == 12
    True
    >>> my_list = [1,2,3,2,1,27,3,1,3,4,1,2,3,4,1,2,3,4,1,2,3,5,\
    2,1,3,5,6,8,9,2,1,23,4,22,1,28,1,2]
    >>> get_next_keystream_value(my_list) == 4
    True
    >>> JOKER1 = 14
    >>> JOKER2 = 15
    >>> my_list = [1,2,3,2,2,27,3,15,3,14,1,2,3,4,1,2,3,4,1,2,3,5,\
    2,1,3,5,6,8,9,2,1,23,4,22,1,28,1,2]
    >>> get_next_keystream_value(my_list) == 1
    True
    '''
    # Initially, try to get one value
    value = get_next_value(deck)
    # Try to find that whether the result lands on the joker
    # If so, do a new round until the result is not land on the
    # joker
    # If not, the value is the value that we get after the first round
    while value == JOKER1 or value == JOKER2:
        value = get_next_value(deck)
    return value


def process_message(deck, message, mode_name):
    '''
    (list of int, str, str) -> str
    REQ: len(deck) >= 28
    Given a list of integers and message and mode name, this function
    will return a new str which will be encrypted if the mode_name is 'e'
    and be decrypted if the mode name is  'd'.
    >>> a = [1,4,7,10,13,16,19,22,25,28,3,6,9,12,15,18,21,24,27,\
    2,5,8,11,14,17,20,23,26]
    >>> my_message = "helloworld"
    >>> process_message(a, my_message, "e")
    'SNISYVZCSL'
    >>> a = [1,4,7,10,13,16,19,22,25,28,3,6,9,12,15,18,21,24,27,\
    2,5,8,11,14,17,20,23,26]
    >>> my_message = "SNISYVZCSL"
    >>> process_message(a, my_message, "d")
    'HELLOWORLD'
    >>> a = [1,4,7,10,13,16,19,22,25,28,3,6,9,12,15,18,21,24,27,\
    2,5,8,11,14,17,20,23,26]
    >>> my_message = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    >>> process_message(a, my_message, "e")
    'LKZKOERSPRTWXNMUZLJLDLPUHW'
    >>> a = [1,4,7,10,13,16,19,22,25,28,3,6,9,12,15,18,21,24,27,\
    2,5,8,11,14,17,20,23,26]
    >>> my_message = 'LKZKOERSPRTWXNMUZLJLDLPUHW'
    >>> process_message(a, my_message, "d")
    'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    >>> a = [1,4,7,10,13,16,19,22,25,28,3,6,9,12,15,18,21,24,27,\
    2,5,8,11,14,17,20,23,26]
    >>> my_message = "HELLOBALABALAWHATTHE\
    HAPPYTHINGWHATAGOODDAYHOWABOUTY"
    >>> process_message(a, my_message, "d")
    'WVOEECPATTRAPWJVKZQMYKWSPWJOBNXHKBYSHQLROXCYQYZSCWM'
    >>> a = [1,4,7,10,13,16,19,22,25,28,3,6,9,12,15,18,21,24,27,\
    2,5,8,11,14,17,20,23,26]
    >>> my_message = 'WVOEECPATTRAPWJVKZQMYKW\
    SPWJOBNXHKBYSHQLROXCYQYZSCWM'
    >>> process_message(a, my_message, "e")
    'HELLOBALABALAWHATTHEHAPPYTHINGWHATAGOODDAYHOWABOUTY'
    '''
    # Initially, create a new empty string
    new_string = str()
    # Then clean the message using the clean-message function
    message = clean_message(message)
    # Check the mode using the if loop
    # if the mode's name is 'd', then use the for loop and decrypt
    # function to decrypt string.
    # Use the get_next_keystream_value function to get the key stream
    # Add the result of function decrypt_letter to the new_string
    # if the mode's name is 'e;, then use the for loop and
    # encrypt function to encrypt the string
    #  Use the get_next_keystream_value function to get the key stream
    # Add the result of function encrypt_letter to the new_string
    if mode_name == 'd':
        for letter in message:
            key_stream = get_next_keystream_value(deck)
            new_string += decrypt_letter(letter, key_stream)
    elif mode_name == "e":
        for letter in message:
            key_stream = get_next_keystream_value(deck)
            new_string += encrypt_letter(letter, key_stream)
    return new_string


def process_messages(deck, messages, mode_name):
    '''
    (list of int, list of str, str) -> list of str
    REQ: len(deck) >= 28
    Given a list of integers and messages and mode name,
    this function will return a list of str which the
    original list of messages will be encrypted if the
    mode_name is 'e' and be decrypted if the mode name is 'd'
    >>> a = [1,4,7,10,13,16,19,22,25,28,3,6,9,12,15,18,21,24,27,\
    2,5,8,11,14,17,20,23,26]
    >>> my_message = ["abcd", "efgh", 'hijk', 'lmno']
    >>> process_messages(a, my_message, "e") == ['LKZK', 'OERS',\
     'OQSV', 'WMLT']
    True
    >>> a = [1,4,7,10,13,16,19,22,25,28,3,6,9,12,15,18,21,24,27,\
    2,5,8,11,14,17,20,23,26]
    >>> my_message = ['LKZK', 'OERS', 'OQSV', 'WMLT']
    >>> process_messages(a, my_message, "d") == ['ABCD', 'EFGH',\
     'HIJK', 'LMNO']
    True
    >>> a = [1,4,7,10,13,16,19,22,25,28,3,6,9,12,15,18,21,24,27,\
    2,5,8,11,14,17,20,23,26]
    >>> my_message = ["I have a good day","Oh that is great",\
      'How about you','not bad',\
       "let go for a dinner","good idea"]
    >>> process_messages(a, my_message, "e") == ['TQXCOZRZVLMLJ',\
     'OFYQUKABWKBJQ', 'FIITAOKLACB',\
     'LGFNBI', 'BKVIKXLDKVIPDNY', 'QGFMAOGY']
    True
    >>> a = [1,4,7,10,13,16,19,22,25,28,3,6,9,12,15,18,21,24,27,\
    2,5,8,11,14,17,20,23,26]
    >>> my_message = ['TQXCOZRZVLMLJ',\
     'OFYQUKABWKBJQ', 'FIITAOKLACB',\
     'LGFNBI', 'BKVIKXLDKVIPDNY', 'QGFMAOGY']
    >>> process_messages(a, my_message, "d") == ['IHAVEAGOODDAY',\
     'OHTHATISGREAT', 'HOWABOUTYOU', 'NOTBAD', \
     'LETGOFORADINNER', 'GOODIDEA']
    True
     >>> a = [1,4,7,10,13,16,19,22,25,28,3,6,9,12,15,18,21,24,27,\
    2,5,8,11,14,17,20,23,26]
    >>> my_message = ["h",'e',"l","l","o"]
    >>> process_messages(a, my_message, "d") == ['W', 'V',\
     'O', 'E', 'E']
    True
    >>> a = [1,4,7,10,13,16,19,22,25,28,3,6,9,12,15,18,21,24,27,\
    2,5,8,11,14,17,20,23,26]
    >>> my_message = ['W', 'V','O', 'E', 'E']
    >>> process_messages(a, my_message, "e") == ['H', 'E', 'L', 'L', 'O']
    True
    '''
    # create a new empty list
    new_list = list()
    # Since the function (process_message) can process one line each time,
    #  we just need to append new line in message to new_list
    for each_message in messages:
        new_list_2 = process_message(deck, each_message, mode_name)
        new_list.append(new_list_2)
    return new_list


def read_messages(file_handle):
    '''
    (io.TextIOWrapper)->list
    REQ：please close the file
    Given the file handle, this function return the
    contents of the file as a list of messages
    '''
    # create a new empty list
    new_list = list()
    # Use the while loop to add each line to
    # the new_list using the for loop
    every_line = file_handle.readline()
    while every_line:
        new_list.append(every_line.strip())
        every_line = file_handle.readline()
    return new_list


def read_deck(file_handle):
    '''
    (io.TextIOWrapper)->list
    REQ：please close the file
    Given the file handle, this function return the
    contents of the file as a list of integers that can
    used as the deck
    '''
    # create a new empty list
    new_list = list()
    # examine each line in the file using the for loop
    # Use the split method to get every item in tge list
    # using the a list of element to contain all the elements in a list
    # then let add those elements into this new list
    for line_of_strings in file_handle:
        a_list_of_elements = line_of_strings.split()
        for element in a_list_of_elements:
            new_list.append(int(element))
    return new_list
