class Table():
    '''A class to represent a SQuEaL table'''

    def __init__(self):
        '''(Table) -> NoneType

        This method is used for create a new dictionary in the attribute
        '''
        # create a new dictionary for storing the elements in the future
        self.table = dict()

    def set_dict(self, new_dict):
        '''(Table, dict of {str: list of str}) -> NoneType

        Populate this table with the data in new_dict.
        The input dictionary must be of the form:
            column_name: list_of_values
        '''
        self.table = new_dict

    def get_dict(self):
        '''(Table) -> dict of {str: list of str}

        Return the dictionary representation of this table. The dictionary keys
        will be the column names, and the list will contain the values
        for that column.
        '''
        return self.table

    def num_rows(self):
        '''(Table) -> int
        This method will return the len of one row in the table'''
        #  Use the if statement to check whether the dictionary is an empty
        #  dictionary
        # If so, the length of the rows is zero
        # If not, the length of the rows is the length of the list
        # of one key in dict because all of the lists is of the same length
        if self.table == {}:
            index = 0
        else:
            list_of_keys = self.get_all_key()
            index = len(self.table[list_of_keys[0]])
        return index

    def print_csv(self):
        '''(Table) -> NoneType
        Print a representation of table in csv format.
        '''
        # no need to edit this one, but you may find it useful (you're welcome)
        dict_rep = self.get_dict()
        columns = list(dict_rep.keys())
        print(','.join(columns))
        rows = self.num_rows()
        for i in range(rows):
            cur_column = []
            for column in columns:
                cur_column.append(dict_rep[column][i])
            print(','.join(cur_column))

    def reset_the_table(self, list_of_column_names):
        '''
        (Table, list of str) -> NoneType
        Given a list of column_names, this function will reset the Table to
        let each column in the given list_of_column_name become empty
        '''
        # Use the for loop to examine each element in the list-of-column-names
        # and reset each column with an empty list
        for column_name in list_of_column_names:
            self.table[column_name] = list()

    def read_from_file(self, file_name):
        '''
        (Table, file) -> NoneType
        Given the file_name, this method will help to create a new table by
        adding element in each row into it
        '''
        # create a file-handle
        file_handle = open(file_name, "r")
        # Because the columns_name occurs in first line in each .csv file,
        # just use the read line method to get the columns' name
        str_of_column_names = file_handle.readline()
        # then we need to initially to delete all space at the beginning and
        # end of a long string which contains all of the column_names
        str_of_column_names = str_of_column_names.strip()
        # then we split the str to get the list of column's name
        list_of_column_names = str_of_column_names.split(",")
        # then use the for loop to create the key, and the value should
        # initially to be an empty list
        self.reset_the_table(list_of_column_names)
        # then we can use the while loop to create the table
        # There is empty line in file like olympics-results
        # Use the if statement to get rid of the empty lines
        # If the new_element is not empty, we can just delete space
        # at the beginning or the end of one column
        # then populate the table with the all the elements in each line
        # keep reading the file until it run out of the line
        new_element = file_handle.readline()
        while new_element:
            new_element.strip()
            if new_element != '\n':
                elements_list = new_element.split(',')
                for index in range(len(elements_list)):
                    row = elements_list[index].strip()
                    self.table[list_of_column_names[index]].append(row)
            new_element = file_handle.readline()
        # close the file!
        file_handle.close()

    def cartesian(self, initial_table, second_table):
        '''
        (Table, Table) -> NoneType
        Given two tables, this method will help to convert one empty table
        into a new table where each row in the first table is paired with
        each row in the second table
        '''
        # According to the cartesian product rule, we need the number of
        # the rows inthe table one and table two
        index_one = initial_table.num_rows()
        index_two = second_table.num_rows()
        # According the the definition of cartesian_product,
        # In the new_dict, each row in the first table need to be repeated
        # x times (x = number of rows in second table) before adding the rows
        # from the table two
        # The value form the table_two need to repeat y times in order
        # (y = number of rows in the first table) before combining with the row
        # from the first table
        # Then we should add all the elements together as I said above
        # Reset the table.
        # Repeat the element in table one and add it back to the original table
        # Repeat tbe same processes to the table_two, but this time
        # I need to let all the element repeat for index_one times in order
        for next_column in initial_table.get_all_key():
            self.table[next_column] = list()
            for next_row in initial_table.get_the_wanted_column(next_column):
                my_list = [next_row]
                tem_list = my_list * index_two
                self.table[next_column].extend(tem_list)
        for next_column in second_table.get_all_key():
            self.table[next_column] = \
                second_table.get_the_wanted_column(next_column) * index_one

    def get_column(self, column_namelist):
        '''
        (Table, list of str) -> Table
        Given a list of column_list, this function will return a table
        that only have the required columns in the previous table
        ('* ' stands for all of column's name)
        '''
        # create a new table for storing the column that satisfy the condition
        # Use a for loop to check whether there is '*' in the given column_list
        # If so, populate the new table with all column from the original table
        # If not, just populate the new table with columns whose name is in the
        #  column_namelist
        new_table = Table()
        if column_namelist[0] == "*":
            for all_column in self.table:
                new_table.table[all_column] = self.table[all_column]
        else:
            for column in column_namelist:
                new_table.table[column] = self.table[column]
        return new_table

    def get_the_wanted_column(self, column):
        '''
        (Table, str) -> list of str
        Given the column name,this method will return a list of value in the
        wanted column
        '''
        # return the wanted column in the table
        wanted_column = self.table[column]
        return wanted_column

    def get_one_element(self, column, count):
        '''
        (Table) -> Table
        Given one_column and count, this method will return the value
        at the count-th position from the input column in table
        '''
        return self.table[column][count]

    def add_new_element(self, column, new_element):
        '''
        (Table, str, str) -> NoneType
        This method is used for adding the given element into the
        given column to a table
        '''
        self.table[column].append(new_element)

    def get_all_key(self):
        '''
        (Table) -> list of str
        This method will return a list of all the keys in the Table
        '''
        the_dict = self.table
        all_the_key = list(the_dict.keys())
        return all_the_key


class Database():
    '''A class to represent a SQuEaL database'''
    def __init__(self):
        '''(Database) -> NoneType

        This method will reset the database'''
        self.database = dict()

    def set_dict(self, new_dict):
        '''(Database, dict of {str: Table}) -> NoneType

        Populate this database with the data in new_dict.
        new_dict must have the format:
            table_name: table
        '''
        self.database = new_dict

    def get_dict(self):
        '''(Database) -> dict of {str: Table}

        Return the dictionary representation of this database.
        The database keys will be the name of the table, and the value
        with be the table itself.
        '''
        return self.database

    def get_database(self, all_of_table_list):
        '''
        (Database, list of str) -> NoneType
        Given a list containing all of the tables' name, this method help
        store all of the table into the database
        '''
        # Since we use the glob method to get all of the table list
        # from the whole file in the computer
        # Use the for loop to get each name of the table name in the given
        # table name_list
        # Create a new database to store all the data
        # Use the read_from_file method to read and add all the data to the
        # the database
        for next_table_name in all_of_table_list:
            index_of_dot = next_table_name.rfind('.')
            table_name = next_table_name[:index_of_dot]
            new_database = Table()
            new_database.read_from_file(next_table_name)
            self.database[table_name] = new_database

    def get_all_table(self, list_of_table):
        '''
        (Database, list of str) -> list of str
        Given a database and list_of_table, this function will
        return a new list that contains all of the table that
        store in the database
        '''
        # Use a for loop to get each table in the list of table
        # Add each table into the new list
        new_list = list()
        for table_name in list_of_table:
            new_list.append(self.database[table_name])
        return new_list


def my_function(input_list):
    input_list[1][2] = 99
    input_list[0] = 100


def my_function2(input_list):
    my_list = input_list [:]
    my_list[1][2] = 99
    my_list[0] = 100
    return my_list


def my_function3(input_list):
    input_list[1] = [1, [2, 3, 4], 5]
    my_function2(input_list[1])
    return input_list

x = 7
print('STEP1:',x)
y = x
x = 9
print('STEP:',x,'-',y)
x = 1
y = [1,2,3]
z = ['a', 'b', 'c']
print('STEP3:', y[x], '-', z[y[x]])
x = 1
y = [1,2,3]
z = [x,y,x]
y = [4,5,6]
print('STEP4:',y,'-',z)
x = [1, [3,2,1], [1,2]]
y = my_function(x)
print('STEP5:',x,'-',y)
x = [1, [3,2,1], [1,2]]
y = my_function2(x)
print('STEP6:',x,'-',y)
x = [1, [3,2,1], [1,2]]
y = my_function3(x)
z = my_function3(y)
print('STEP7:', x, '-', y)
x = [1, [3,2,1], [1,2]]
y = my_function(my_function2(my_function3(x)))
print('STEP8:', x, '-', y)


class Grandparent():
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def blah(self):
        return 'GP:' + self.a + self.b


class Parent1(Grandparent):
    def __init__(self, a, b, c):
        Grandparent.__init__(self, a, b)
        self._c = c

    def blah(self):
        return 'P1:' + self.a + self.b + self._c


class Parent2(Grandparent):
    def __init__(self, a, b, c, d):
        self.a = a
        self.b = b
        self.c = self.blah()


class Child1(Parent2):
    def __init__(self, a, b, c, d):
        Parent1.__init__(self, a, b, c)
        self._d = d


class Child2(Parent1):
    def __init__(self, a, b, c, d):
        Child1.__init__(self, b, c, d, a)
        Parent2.__init__(self, a,b,c)

    def blah(self):
        return ('C2:'+ self.a + self.b + self.c + self.d )

